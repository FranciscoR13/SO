void *recebe_pedidos(void *data) {
    // VARIAVEIS
    DATA *d = (DATA *) data; // CONVERTE * PARA ACEDER AOS DADOS
    PEDIDO p;
    int feed_pipe, man_pipe;
    char feed_fifo[TAM];
    // FIM VARIAVEIS

    // CONSTROI O FIFO
    if (mkfifo(FIFO_SERV, 0600) < 0) {
        perror("Erro ao criar FIFO_SERV");
        return NULL;
    }

    // ABRE O FIFO
    man_pipe = open(FIFO_SERV, O_RDWR);
    if (man_pipe < 0) {
        perror("Erro ao abrir FIFO_SERV_MSG");
        return NULL;
    }

    while (d->pedidos_on) {
        // LER O PEDIDO
        int tam = read(man_pipe, &p, sizeof(PEDIDO));
        if (tam <= 0) {
            perror("Erro ao ler do FIFO_SERV_MSG");
            break;
        }

        // PROCESSAR O PEDIDO COM SWITCH
        switch (p.tipo) {
            case 1: // LOGIN
                // CONSTRÓI O NOME DO FIFO_CLI
                snprintf(feed_fifo, TAM, FIFO_CLI, p.l.pid);
                feed_pipe = open(feed_fifo, O_WRONLY);
                if (feed_pipe < 0) {
                    perror("\nErro ao abrir FIFO do cliente\n");
                    continue;
                }

                // VERIFICA SE O USERNAME JÁ EXISTE
                bool valido = true;
                pthread_mutex_lock(d->ptrinco);
                for (int i = 0; i < d->nUsers; i++) {
                    if (strcmp(d->users_names[i], p.l.username) == 0 || d->users_pids[i] == p.l.pid) {
                        valido = false;
                        break;
                    }
                }
                pthread_mutex_unlock(d->ptrinco);

                // ENVIA A RESPOSTA AO USER
                if (valido) {
                    RESPOSTA res;
                    strcpy(res.str, "SUCCESS");
                    write(feed_pipe, &res, sizeof(RESPOSTA));

                    // ADICIONA O USERNAME E O PID AOS DADOS
                    pthread_mutex_lock(d->ptrinco);
                    strcpy(d->users_names[d->nUsers], p.l.username);
                    d->users_pids[d->nUsers] = p.l.pid;
                    d->nUsers++;
                    pthread_mutex_unlock(d->ptrinco);
                } else {
                    RESPOSTA res;
                    strcpy(res.str, "FAIL");
                    write(feed_pipe, &res, sizeof(RESPOSTA));
                }

                close(feed_pipe);
                break;

            case 2: // MENSAGEM
                // Processamento para envio de mensagens
                printf("[INFO] Mensagem recebida: %s\n", p.m.msg);
                break;

            case 3: // STRING
                if (strcmp(p.r.str, "CLOSE") == 0) {
                    pthread_mutex_lock(d->ptrinco);
                    d->pedidos_on = false;
                    pthread_mutex_unlock(d->ptrinco);
                    break;
                } else if (strcmp(p.r.str, "EXIT") == 0) {
                    pthread_mutex_lock(d->ptrinco);
                    for (int i = d->nUsers - 1; i >= 0; i--) {
                        PEDIDO pf;
                        pf.tipo = 3;
                        strcpy(pf.r.str, "EXIT");

                        if (envia_info(d->users_pids[i], &pf)) {
                            // Remoção do usuário em caso de sucesso
                            for (int j = i; j < d->nUsers - 1; j++) {
                                d->users_pids[j] = d->users_pids[j + 1];
                                strncpy(d->users_names[j], d->users_names[j + 1], TAM_NOME);
                            }
                            d->nUsers--;
                        } else {
                            printf("[ERRO] Não foi possível enviar a mensagem 'REMOVE' para o usuário %d\n", d->users_pids[i]);
                        }
                    }
                    pthread_mutex_unlock(d->ptrinco);
                }
                break;

            default:
                printf("[ERRO] Tipo de pedido desconhecido: %d\n", p.tipo);
                break;
        }
    }

    // FECHAR E APAGAR
    close(man_pipe);
    unlink(FIFO_SERV);

    printf("[MANAGER] Thread Pedidos encerrada.\n");

    return NULL;
}
